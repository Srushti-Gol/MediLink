//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoctorAppointmentDesktopApp.AppointmentHostService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/DoctorAppointmentWebService")]
    [System.SerializableAttribute()]
    public partial class Appointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AppointmentDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AppointmentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DoctorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoctorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AppointmentDateTime {
            get {
                return this.AppointmentDateTimeField;
            }
            set {
                if ((this.AppointmentDateTimeField.Equals(value) != true)) {
                    this.AppointmentDateTimeField = value;
                    this.RaisePropertyChanged("AppointmentDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AppointmentID {
            get {
                return this.AppointmentIDField;
            }
            set {
                if ((this.AppointmentIDField.Equals(value) != true)) {
                    this.AppointmentIDField = value;
                    this.RaisePropertyChanged("AppointmentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DoctorID {
            get {
                return this.DoctorIDField;
            }
            set {
                if ((this.DoctorIDField.Equals(value) != true)) {
                    this.DoctorIDField = value;
                    this.RaisePropertyChanged("DoctorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoctorName {
            get {
                return this.DoctorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorNameField, value) != true)) {
                    this.DoctorNameField = value;
                    this.RaisePropertyChanged("DoctorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusID {
            get {
                return this.StatusIDField;
            }
            set {
                if ((this.StatusIDField.Equals(value) != true)) {
                    this.StatusIDField = value;
                    this.RaisePropertyChanged("StatusID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Doctor", Namespace="http://schemas.datacontract.org/2004/07/DoctorAppointmentWebService")]
    [System.SerializableAttribute()]
    public partial class Doctor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DoctorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialtyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DoctorId {
            get {
                return this.DoctorIdField;
            }
            set {
                if ((this.DoctorIdField.Equals(value) != true)) {
                    this.DoctorIdField = value;
                    this.RaisePropertyChanged("DoctorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Specialty {
            get {
                return this.SpecialtyField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialtyField, value) != true)) {
                    this.SpecialtyField = value;
                    this.RaisePropertyChanged("Specialty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/DoctorAppointmentWebService")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientId {
            get {
                return this.PatientIdField;
            }
            set {
                if ((this.PatientIdField.Equals(value) != true)) {
                    this.PatientIdField = value;
                    this.RaisePropertyChanged("PatientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentHostService.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ScheduleAppointment", ReplyAction="http://tempuri.org/IAppointmentService/ScheduleAppointmentResponse")]
        void ScheduleAppointment(int doctorId, int patientId, System.DateTime appointmentDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/ScheduleAppointment", ReplyAction="http://tempuri.org/IAppointmentService/ScheduleAppointmentResponse")]
        System.Threading.Tasks.Task ScheduleAppointmentAsync(int doctorId, int patientId, System.DateTime appointmentDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CancelAppointmentResponse")]
        void CancelAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CancelAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CancelAppointmentResponse")]
        System.Threading.Tasks.Task CancelAppointmentAsync(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CompleteAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CompleteAppointmentResponse")]
        void CompleteAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/CompleteAppointment", ReplyAction="http://tempuri.org/IAppointmentService/CompleteAppointmentResponse")]
        System.Threading.Tasks.Task CompleteAppointmentAsync(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetDoctorAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetDoctorAppointmentsResponse")]
        DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetDoctorAppointments(int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetDoctorAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetDoctorAppointmentsResponse")]
        System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetDoctorAppointmentsAsync(int doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetPatientAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetPatientAppointmentsResponse")]
        DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetPatientAppointments(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetPatientAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetPatientAppointmentsResponse")]
        System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetPatientAppointmentsAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetTotalAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetTotalAppointmentsResponse")]
        int GetTotalAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetTotalAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetTotalAppointmentsResponse")]
        System.Threading.Tasks.Task<int> GetTotalAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetActiveAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetActiveAppointmentsResponse")]
        int GetActiveAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetActiveAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetActiveAppointmentsResponse")]
        System.Threading.Tasks.Task<int> GetActiveAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetCanceledAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetCanceledAppointmentsResponse")]
        int GetCanceledAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetCanceledAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetCanceledAppointmentsResponse")]
        System.Threading.Tasks.Task<int> GetCanceledAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetCompletedAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetCompletedAppointmentsResponse")]
        int GetCompletedAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetCompletedAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetCompletedAppointmentsResponse")]
        System.Threading.Tasks.Task<int> GetCompletedAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetDoctors", ReplyAction="http://tempuri.org/IAppointmentService/GetDoctorsResponse")]
        DoctorAppointmentDesktopApp.AppointmentHostService.Doctor[] GetDoctors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetDoctors", ReplyAction="http://tempuri.org/IAppointmentService/GetDoctorsResponse")]
        System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Doctor[]> GetDoctorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetPatients", ReplyAction="http://tempuri.org/IAppointmentService/GetPatientsResponse")]
        DoctorAppointmentDesktopApp.AppointmentHostService.Patient[] GetPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetPatients", ReplyAction="http://tempuri.org/IAppointmentService/GetPatientsResponse")]
        System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Patient[]> GetPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetAllAppointmentsResponse")]
        DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetAllAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppointmentService/GetAllAppointments", ReplyAction="http://tempuri.org/IAppointmentService/GetAllAppointmentsResponse")]
        System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetAllAppointmentsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : DoctorAppointmentDesktopApp.AppointmentHostService.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<DoctorAppointmentDesktopApp.AppointmentHostService.IAppointmentService>, DoctorAppointmentDesktopApp.AppointmentHostService.IAppointmentService {
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ScheduleAppointment(int doctorId, int patientId, System.DateTime appointmentDateTime) {
            base.Channel.ScheduleAppointment(doctorId, patientId, appointmentDateTime);
        }
        
        public System.Threading.Tasks.Task ScheduleAppointmentAsync(int doctorId, int patientId, System.DateTime appointmentDateTime) {
            return base.Channel.ScheduleAppointmentAsync(doctorId, patientId, appointmentDateTime);
        }
        
        public void CancelAppointment(int appointmentId) {
            base.Channel.CancelAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task CancelAppointmentAsync(int appointmentId) {
            return base.Channel.CancelAppointmentAsync(appointmentId);
        }
        
        public void CompleteAppointment(int appointmentId) {
            base.Channel.CompleteAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task CompleteAppointmentAsync(int appointmentId) {
            return base.Channel.CompleteAppointmentAsync(appointmentId);
        }
        
        public DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetDoctorAppointments(int doctorId) {
            return base.Channel.GetDoctorAppointments(doctorId);
        }
        
        public System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetDoctorAppointmentsAsync(int doctorId) {
            return base.Channel.GetDoctorAppointmentsAsync(doctorId);
        }
        
        public DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetPatientAppointments(int patientId) {
            return base.Channel.GetPatientAppointments(patientId);
        }
        
        public System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetPatientAppointmentsAsync(int patientId) {
            return base.Channel.GetPatientAppointmentsAsync(patientId);
        }
        
        public int GetTotalAppointments() {
            return base.Channel.GetTotalAppointments();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalAppointmentsAsync() {
            return base.Channel.GetTotalAppointmentsAsync();
        }
        
        public int GetActiveAppointments() {
            return base.Channel.GetActiveAppointments();
        }
        
        public System.Threading.Tasks.Task<int> GetActiveAppointmentsAsync() {
            return base.Channel.GetActiveAppointmentsAsync();
        }
        
        public int GetCanceledAppointments() {
            return base.Channel.GetCanceledAppointments();
        }
        
        public System.Threading.Tasks.Task<int> GetCanceledAppointmentsAsync() {
            return base.Channel.GetCanceledAppointmentsAsync();
        }
        
        public int GetCompletedAppointments() {
            return base.Channel.GetCompletedAppointments();
        }
        
        public System.Threading.Tasks.Task<int> GetCompletedAppointmentsAsync() {
            return base.Channel.GetCompletedAppointmentsAsync();
        }
        
        public DoctorAppointmentDesktopApp.AppointmentHostService.Doctor[] GetDoctors() {
            return base.Channel.GetDoctors();
        }
        
        public System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Doctor[]> GetDoctorsAsync() {
            return base.Channel.GetDoctorsAsync();
        }
        
        public DoctorAppointmentDesktopApp.AppointmentHostService.Patient[] GetPatients() {
            return base.Channel.GetPatients();
        }
        
        public System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Patient[]> GetPatientsAsync() {
            return base.Channel.GetPatientsAsync();
        }
        
        public DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[] GetAllAppointments() {
            return base.Channel.GetAllAppointments();
        }
        
        public System.Threading.Tasks.Task<DoctorAppointmentDesktopApp.AppointmentHostService.Appointment[]> GetAllAppointmentsAsync() {
            return base.Channel.GetAllAppointmentsAsync();
        }
    }
}
